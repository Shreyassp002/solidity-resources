{
  "address": "0x759cc01Ba3fb159dce7Fb19A049d86958F351252",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5dd956a73ab2333a76d62845221fdd5bd315d1ea4d49773a524ad68bc1c07f5f",
  "receipt": {
    "to": null,
    "from": "0x17A076d6cCaf37Bc9386EAB653A5EfAd8B07430C",
    "contractAddress": "0x759cc01Ba3fb159dce7Fb19A049d86958F351252",
    "transactionIndex": 236,
    "gasUsed": "810695",
    "logsBloom": "0x
    "blockHash": "0xa6ca9a32e04b59f863318717e0b8f3d628e9b537e0542b95ae444f60374255ec",
    "transactionHash": "0x5dd956a73ab2333a76d62845221fdd5bd315d1ea4d49773a524ad68bc1c07f5f",
    "logs": [],
    "blockNumber": 8648901,
    "cumulativeGasUsed": "32656905",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "34aa79fb5923cc354b82d697cc86af39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 1 * 10 ** 18;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x1a918b15300654c2035b5c9ea3414cbb1f9191d1f5ef08c58146715a0922d3a5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xb81272401db86c444f08672081891d345e5ac73e9e3ddd7e99077f3acecacfbb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ea5380380610ea583398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d4661015f600039600081816102e401526105680152610d466000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e2565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107a0565b61051c565b6040516100d891906107e6565b60405180910390f35b3480156100ed57600080fd5b506100f6610534565b60405161010391906107e6565b60405180910390f35b34801561011857600080fd5b50610121610540565b60405161012e9190610860565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610566565b604051610163919061088a565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108d1565b61058a565b6040516101a0919061088a565b60405180910390f35b670de0b6b3a76400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c990919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f9061095b565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027691906109aa565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610367576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561040c5760006001828154811061038d5761038c6109de565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808060010191505061036a565b50600067ffffffffffffffff81111561042857610427610a0d565b5b6040519080825280602002602001820160405280156104565781602001602082028036833780820191505090505b506001908051906020019061046c929190610696565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049390610a6d565b60006040518083038185875af1925050503d80600081146104d0576040519150601f19603f3d011682016040523d82523d6000602084013e6104d5565b606091505b5050905080610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051090610ace565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b670de0b6b3a764000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061059a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d583610605565b90506000670de0b6b3a764000085836105ee9190610aee565b6105f89190610b5f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106779190610c1d565b5050509150506402540be4008161068e9190610c98565b915050919050565b82805482825590600052602060002090810192821561070f579160200282015b8281111561070e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b6565b5b50905061071c9190610720565b5090565b5b80821115610739576000816000905550600101610721565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076d82610742565b9050919050565b61077d81610762565b811461078857600080fd5b50565b60008135905061079a81610774565b92915050565b6000602082840312156107b6576107b561073d565b5b60006107c48482850161078b565b91505092915050565b6000819050919050565b6107e0816107cd565b82525050565b60006020820190506107fb60008301846107d7565b92915050565b6000819050919050565b600061082661082161081c84610742565b610801565b610742565b9050919050565b60006108388261080b565b9050919050565b600061084a8261082d565b9050919050565b61085a8161083f565b82525050565b60006020820190506108756000830184610851565b92915050565b61088481610762565b82525050565b600060208201905061089f600083018461087b565b92915050565b6108ae816107cd565b81146108b957600080fd5b50565b6000813590506108cb816108a5565b92915050565b6000602082840312156108e7576108e661073d565b5b60006108f5848285016108bc565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610945601b836108fe565b91506109508261090f565b602082019050919050565b6000602082019050818103600083015261097481610938565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109b5826107cd565b91506109c0836107cd565b92508282019050808211156109d8576109d761097b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a57600083610a3c565b9150610a6282610a47565b600082019050919050565b6000610a7882610a4a565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ab8600b836108fe565b9150610ac382610a82565b602082019050919050565b60006020820190508181036000830152610ae781610aab565b9050919050565b6000610af9826107cd565b9150610b04836107cd565b9250828202610b12816107cd565b91508282048414831517610b2957610b2861097b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b6a826107cd565b9150610b75836107cd565b925082610b8557610b84610b30565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610baf81610b90565b8114610bba57600080fd5b50565b600081519050610bcc81610ba6565b92915050565b6000819050919050565b610be581610bd2565b8114610bf057600080fd5b50565b600081519050610c0281610bdc565b92915050565b600081519050610c17816108a5565b92915050565b600080600080600060a08688031215610c3957610c3861073d565b5b6000610c4788828901610bbd565b9550506020610c5888828901610bf3565b9450506040610c6988828901610c08565b9350506060610c7a88828901610c08565b9250506080610c8b88828901610bbd565b9150509295509295909350565b6000610ca382610bd2565b9150610cae83610bd2565b9250828202610cbc81610bd2565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cf457610cf361097b565b5b8282058414831517610d0957610d0861097b565b5b509291505056fea2646970667358221220123fc1d3f855dd0c21a4bb122f05b50616db0d19f85b09080919990c47bac1e864736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e2565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107a0565b61051c565b6040516100d891906107e6565b60405180910390f35b3480156100ed57600080fd5b506100f6610534565b60405161010391906107e6565b60405180910390f35b34801561011857600080fd5b50610121610540565b60405161012e9190610860565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610566565b604051610163919061088a565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108d1565b61058a565b6040516101a0919061088a565b60405180910390f35b670de0b6b3a76400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c990919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f9061095b565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027691906109aa565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610367576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561040c5760006001828154811061038d5761038c6109de565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808060010191505061036a565b50600067ffffffffffffffff81111561042857610427610a0d565b5b6040519080825280602002602001820160405280156104565781602001602082028036833780820191505090505b506001908051906020019061046c929190610696565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049390610a6d565b60006040518083038185875af1925050503d80600081146104d0576040519150601f19603f3d011682016040523d82523d6000602084013e6104d5565b606091505b5050905080610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051090610ace565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b670de0b6b3a764000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061059a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d583610605565b90506000670de0b6b3a764000085836105ee9190610aee565b6105f89190610b5f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106779190610c1d565b5050509150506402540be4008161068e9190610c98565b915050919050565b82805482825590600052602060002090810192821561070f579160200282015b8281111561070e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b6565b5b50905061071c9190610720565b5090565b5b80821115610739576000816000905550600101610721565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076d82610742565b9050919050565b61077d81610762565b811461078857600080fd5b50565b60008135905061079a81610774565b92915050565b6000602082840312156107b6576107b561073d565b5b60006107c48482850161078b565b91505092915050565b6000819050919050565b6107e0816107cd565b82525050565b60006020820190506107fb60008301846107d7565b92915050565b6000819050919050565b600061082661082161081c84610742565b610801565b610742565b9050919050565b60006108388261080b565b9050919050565b600061084a8261082d565b9050919050565b61085a8161083f565b82525050565b60006020820190506108756000830184610851565b92915050565b61088481610762565b82525050565b600060208201905061089f600083018461087b565b92915050565b6108ae816107cd565b81146108b957600080fd5b50565b6000813590506108cb816108a5565b92915050565b6000602082840312156108e7576108e661073d565b5b60006108f5848285016108bc565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610945601b836108fe565b91506109508261090f565b602082019050919050565b6000602082019050818103600083015261097481610938565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109b5826107cd565b91506109c0836107cd565b92508282019050808211156109d8576109d761097b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a57600083610a3c565b9150610a6282610a47565b600082019050919050565b6000610a7882610a4a565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ab8600b836108fe565b9150610ac382610a82565b602082019050919050565b60006020820190508181036000830152610ae781610aab565b9050919050565b6000610af9826107cd565b9150610b04836107cd565b9250828202610b12816107cd565b91508282048414831517610b2957610b2861097b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b6a826107cd565b9150610b75836107cd565b925082610b8557610b84610b30565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610baf81610b90565b8114610bba57600080fd5b50565b600081519050610bcc81610ba6565b92915050565b6000819050919050565b610be581610bd2565b8114610bf057600080fd5b50565b600081519050610c0281610bdc565b92915050565b600081519050610c17816108a5565b92915050565b600080600080600060a08688031215610c3957610c3861073d565b5b6000610c4788828901610bbd565b9550506020610c5888828901610bf3565b9450506040610c6988828901610c08565b9350506060610c7a88828901610c08565b9250506080610c8b88828901610bbd565b9150509295509295909350565b6000610ca382610bd2565b9150610cae83610bd2565b9250828202610cbc81610bd2565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cf457610cf361097b565b5b8282058414831517610d0957610d0861097b565b5b509291505056fea2646970667358221220123fc1d3f855dd0c21a4bb122f05b50616db0d19f85b09080919990c47bac1e864736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 236,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 239,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 251,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)223"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)223": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}