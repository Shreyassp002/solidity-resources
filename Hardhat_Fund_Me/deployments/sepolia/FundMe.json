{
  "address": "0xc624fFC2c9069a53e0D62CF5172fB10aDDA2D205",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x491dd6bbf0fed48eca69c20172a4c2fbec07fce90cb799d2822c70ef3e944c4c",
  "receipt": {
    "to": null,
    "from": "0x17A076d6cCaf37Bc9386EAB653A5EfAd8B07430C",
    "contractAddress": "0xc624fFC2c9069a53e0D62CF5172fB10aDDA2D205",
    "transactionIndex": 105,
    "gasUsed": "963313",
    "logsBloom": "0x
    "blockHash": "0x48eb93dd91ab42aaf0c1026db3d062f1797c9d134685d14bc2f3eb18696ff228",
    "transactionHash": "0x491dd6bbf0fed48eca69c20172a4c2fbec07fce90cb799d2822c70ef3e944c4c",
    "logs": [],
    "blockNumber": 8689056,
    "cumulativeGasUsed": "11918103",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "f43469a40d7ae832612d9c09716a07ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shreyas Patil\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contrac is to demo a sample funding contracts_priceFeed\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//Pragma\\npragma solidity ^0.8.7;\\n\\n//Imports\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//Error\\nerror FundMe__NotOwner();\\n\\n//Interface, libraries, contracts\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Shreyas Patil\\n * @notice This contrac is to demo a sample funding contracts_priceFeed\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    //Type Declarations\\n    using PriceConverter for uint256;\\n\\n    //State variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 1 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    //functions\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings cant be in memory\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x3ae5cc56bc758bb830a7507a71e86e15a6474b50f371cef126bb0fd6530c2417\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xb81272401db86c444f08672081891d345e5ac73e9e3ddd7e99077f3acecacfbb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200118c3803806200118c83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161100c62000180600039600081816101f001528181610438015281816105c101526107b1015261100c6000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a66565b6101a6565b6040516100b49190610aac565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e9610428565b6040516100f69190610aac565b60405180910390f35b34801561010b57600080fd5b50610114610434565b6040516101219190610ad6565b60405180910390f35b34801561013657600080fd5b5061013f61045c565b60405161014c9190610b50565b60405180910390f35b61015d610486565b005b6101676105bf565b005b34801561017557600080fd5b50610190600480360381019061018b9190610b97565b610847565b60405161019d9190610ad6565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103185760006001828154811061029957610298610bc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080600101915050610276565b50600067ffffffffffffffff81111561033457610333610bf3565b5b6040519080825280602002602001820160405280156103625781602001602082028036833780820191505090505b506001908051906020019061037892919061095c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039f90610c53565b60006040518083038185875af1925050503d80600081146103dc576040519150601f19603f3d011682016040523d82523d6000602084013e6103e1565b606091505b5050905080610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041c90610cc5565b60405180910390fd5b50565b670de0b6b3a764000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b670de0b6b3a76400006104c4600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088f90919063ffffffff16565b1015610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90610d31565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105539190610d80565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610644576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067e575b5050505050905060005b815181101561074c5760008282815181106106f0576106ef610bc4565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506106d2565b50600067ffffffffffffffff81111561076857610767610bf3565b5b6040519080825280602002602001820160405280156107965781602001602082028036833780820191505090505b50600190805190602001906107ac92919061095c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f390610c53565b60006040518083038185875af1925050503d8060008114610830576040519150601f19603f3d011682016040523d82523d6000602084013e610835565b606091505b505090508061084357600080fd5b5050565b60006001828154811061085d5761085c610bc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061089b836108cb565b90506000670de0b6b3a764000085836108b49190610db4565b6108be9190610e25565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190610ee3565b5050509150506402540be400816109549190610f5e565b915050919050565b8280548282559060005260206000209081019282156109d5579160200282015b828111156109d45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061097c565b5b5090506109e291906109e6565b5090565b5b808211156109ff5760008160009055506001016109e7565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3382610a08565b9050919050565b610a4381610a28565b8114610a4e57600080fd5b50565b600081359050610a6081610a3a565b92915050565b600060208284031215610a7c57610a7b610a03565b5b6000610a8a84828501610a51565b91505092915050565b6000819050919050565b610aa681610a93565b82525050565b6000602082019050610ac16000830184610a9d565b92915050565b610ad081610a28565b82525050565b6000602082019050610aeb6000830184610ac7565b92915050565b6000819050919050565b6000610b16610b11610b0c84610a08565b610af1565b610a08565b9050919050565b6000610b2882610afb565b9050919050565b6000610b3a82610b1d565b9050919050565b610b4a81610b2f565b82525050565b6000602082019050610b656000830184610b41565b92915050565b610b7481610a93565b8114610b7f57600080fd5b50565b600081359050610b9181610b6b565b92915050565b600060208284031215610bad57610bac610a03565b5b6000610bbb84828501610b82565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c3d600083610c22565b9150610c4882610c2d565b600082019050919050565b6000610c5e82610c30565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610caf600b83610c68565b9150610cba82610c79565b602082019050919050565b60006020820190508181036000830152610cde81610ca2565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d1b601b83610c68565b9150610d2682610ce5565b602082019050919050565b60006020820190508181036000830152610d4a81610d0e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8b82610a93565b9150610d9683610a93565b9250828201905080821115610dae57610dad610d51565b5b92915050565b6000610dbf82610a93565b9150610dca83610a93565b9250828202610dd881610a93565b91508282048414831517610def57610dee610d51565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e3082610a93565b9150610e3b83610a93565b925082610e4b57610e4a610df6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e7581610e56565b8114610e8057600080fd5b50565b600081519050610e9281610e6c565b92915050565b6000819050919050565b610eab81610e98565b8114610eb657600080fd5b50565b600081519050610ec881610ea2565b92915050565b600081519050610edd81610b6b565b92915050565b600080600080600060a08688031215610eff57610efe610a03565b5b6000610f0d88828901610e83565b9550506020610f1e88828901610eb9565b9450506040610f2f88828901610ece565b9350506060610f4088828901610ece565b9250506080610f5188828901610e83565b9150509295509295909350565b6000610f6982610e98565b9150610f7483610e98565b9250828202610f8281610e98565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fba57610fb9610d51565b5b8282058414831517610fcf57610fce610d51565b5b509291505056fea2646970667358221220f8f8e18a9b6d8a46f3494ba69103980cf6f07391ea01a77eadce98dcc8ffe0fa64736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a66565b6101a6565b6040516100b49190610aac565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e9610428565b6040516100f69190610aac565b60405180910390f35b34801561010b57600080fd5b50610114610434565b6040516101219190610ad6565b60405180910390f35b34801561013657600080fd5b5061013f61045c565b60405161014c9190610b50565b60405180910390f35b61015d610486565b005b6101676105bf565b005b34801561017557600080fd5b50610190600480360381019061018b9190610b97565b610847565b60405161019d9190610ad6565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103185760006001828154811061029957610298610bc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080600101915050610276565b50600067ffffffffffffffff81111561033457610333610bf3565b5b6040519080825280602002602001820160405280156103625781602001602082028036833780820191505090505b506001908051906020019061037892919061095c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039f90610c53565b60006040518083038185875af1925050503d80600081146103dc576040519150601f19603f3d011682016040523d82523d6000602084013e6103e1565b606091505b5050905080610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041c90610cc5565b60405180910390fd5b50565b670de0b6b3a764000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b670de0b6b3a76400006104c4600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088f90919063ffffffff16565b1015610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90610d31565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105539190610d80565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610644576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067e575b5050505050905060005b815181101561074c5760008282815181106106f0576106ef610bc4565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506106d2565b50600067ffffffffffffffff81111561076857610767610bf3565b5b6040519080825280602002602001820160405280156107965781602001602082028036833780820191505090505b50600190805190602001906107ac92919061095c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f390610c53565b60006040518083038185875af1925050503d8060008114610830576040519150601f19603f3d011682016040523d82523d6000602084013e610835565b606091505b505090508061084357600080fd5b5050565b60006001828154811061085d5761085c610bc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061089b836108cb565b90506000670de0b6b3a764000085836108b49190610db4565b6108be9190610e25565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190610ee3565b5050509150506402540be400816109549190610f5e565b915050919050565b8280548282559060005260206000209081019282156109d5579160200282015b828111156109d45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061097c565b5b5090506109e291906109e6565b5090565b5b808211156109ff5760008160009055506001016109e7565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3382610a08565b9050919050565b610a4381610a28565b8114610a4e57600080fd5b50565b600081359050610a6081610a3a565b92915050565b600060208284031215610a7c57610a7b610a03565b5b6000610a8a84828501610a51565b91505092915050565b6000819050919050565b610aa681610a93565b82525050565b6000602082019050610ac16000830184610a9d565b92915050565b610ad081610a28565b82525050565b6000602082019050610aeb6000830184610ac7565b92915050565b6000819050919050565b6000610b16610b11610b0c84610a08565b610af1565b610a08565b9050919050565b6000610b2882610afb565b9050919050565b6000610b3a82610b1d565b9050919050565b610b4a81610b2f565b82525050565b6000602082019050610b656000830184610b41565b92915050565b610b7481610a93565b8114610b7f57600080fd5b50565b600081359050610b9181610b6b565b92915050565b600060208284031215610bad57610bac610a03565b5b6000610bbb84828501610b82565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c3d600083610c22565b9150610c4882610c2d565b600082019050919050565b6000610c5e82610c30565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610caf600b83610c68565b9150610cba82610c79565b602082019050919050565b60006020820190508181036000830152610cde81610ca2565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d1b601b83610c68565b9150610d2682610ce5565b602082019050919050565b60006020820190508181036000830152610d4a81610d0e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8b82610a93565b9150610d9683610a93565b9250828201905080821115610dae57610dad610d51565b5b92915050565b6000610dbf82610a93565b9150610dca83610a93565b9250828202610dd881610a93565b91508282048414831517610def57610dee610d51565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e3082610a93565b9150610e3b83610a93565b925082610e4b57610e4a610df6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e7581610e56565b8114610e8057600080fd5b50565b600081519050610e9281610e6c565b92915050565b6000819050919050565b610eab81610e98565b8114610eb657600080fd5b50565b600081519050610ec881610ea2565b92915050565b600081519050610edd81610b6b565b92915050565b600080600080600060a08688031215610eff57610efe610a03565b5b6000610f0d88828901610e83565b9550506020610f1e88828901610eb9565b9450506040610f2f88828901610ece565b9350506060610f4088828901610ece565b9250506080610f5188828901610e83565b9150509295509295909350565b6000610f6982610e98565b9150610f7483610e98565b9250828202610f8281610e98565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fba57610fb9610d51565b5b8282058414831517610fcf57610fce610d51565b5b509291505056fea2646970667358221220f8f8e18a9b6d8a46f3494ba69103980cf6f07391ea01a77eadce98dcc8ffe0fa64736f6c63430008180033",
  "devdoc": {
    "author": "Shreyas Patil",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contrac is to demo a sample funding contracts_priceFeed",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}